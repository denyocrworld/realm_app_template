{
  "dropdown_assigned_to": {
    "prefix": "dropdown_assigned_to",
    "body": "AssignedToDropdownField(\nlabel: \"Assigned To\",\nvalidator: Validator.required,\nvalue: controller.assignedTo,\nonChanged: (value, label) {\ncontroller.assignedTo = value;\n},\n),"
  },
  "class_validator": {
    "prefix": "class_validator",
    "body": "class Validator {\nstatic String? rule(\nString? value, {\nbool required = false,\n}) {\nif (required && value!.isEmpty) {\nreturn \"This field is required\";\n}\nreturn null;\n}\n\nstatic String? required(\ndynamic value, {\nString? fieldName,\n}) {\nif (value == null) {\nreturn \"This field is required\";\n}\n\nif (value is String || value == null) {\nif (value.toString() == \"null\") return \"This field is required\";\nif (value.isEmpty) return \"This field is required\";\n}\n\nif (value is List) {\nif (value.isEmpty) return \"This field is required\";\n}\nreturn null;\n}\n\nstatic String? email(String? value) {\nif (value!.isEmpty) return \"This field is required\";\n\nfinal bool isValidEmail = RegExp(\n\"^[a-zA-Z0-9.a-zA-Z0-9.!#\\$%&'*+-/=?^_`{|}~]+@[a-zA-Z0-9]+.[a-zA-Z]+\")\n.hasMatch(value);\n\nif (!isValidEmail) {\nreturn \"This field is not in a valid email format\";\n}\nreturn null;\n}\n\nstatic String? number(String? value) {\nif (value!.isEmpty) return \"This field is required\";\n\nfinal bool isNumber = RegExp(r\"^[0-9]+$\").hasMatch(value);\nif (!isNumber) {\nreturn \"This field is not in a valid number format\";\n}\nreturn null;\n}\n\nstatic String? atLeastOneitem(List<Map<String, dynamic>> items) {\nvar checkedItems = items.where((i) => i[\"checked\"] == true).toList();\nif (checkedItems.isEmpty) {\nreturn \"you must choose at least one item\";\n}\nreturn null;\n}\n}"
  },
  "reuseable_card": {
    "prefix": "reuseable_card",
    "body": "// ignore_for_file: camel_case_types, prefer_typing_uninitialized_variables\n\nimport 'package:flutter/material.dart';\nimport 'package:realm_app/core.dart';\n\nclass QCard extends StatelessWidget {\nfinal String? title;\nfinal String? subtitle;\nfinal EdgeInsetsGeometry? padding;\nfinal List<Widget> children;\nfinal List<Widget> actions;\n\nQCard({\nKey? key,\nrequired this.children,\nthis.title,\nthis.subtitle,\nthis.padding,\nthis.actions = const [],\n}) : super(key: key);\n\n@override\nWidget build(BuildContext context) {\nreturn Container(\nclipBehavior: Clip.antiAlias,\ndecoration: BoxDecoration(\ncolor: Colors.white,\nborderRadius: BorderRadius.all(\nRadius.circular(\n12.0,\n),\n),\n),\nchild: Column(\ncrossAxisAlignment: CrossAxisAlignment.start,\nchildren: [\nif (title != null) ...[\nContainer(\ndecoration: BoxDecoration(\ncolor: primaryColor,\n),\npadding: EdgeInsets.all(12.0),\nchild: Row(\ncrossAxisAlignment: CrossAxisAlignment.start,\nchildren: [\nExpanded(\nchild: Column(\ncrossAxisAlignment: CrossAxisAlignment.start,\nchildren: [\nText(\n\"$title\",\nstyle: TextStyle(\nfontSize: 16.0,\ncolor: Colors.white,\n),\n),\nif (subtitle != null)\nText(\n\"$subtitle\",\nstyle: TextStyle(\nfontSize: 12.0,\ncolor: Colors.white,\n),\n),\n],\n),\n),\nif (actions.isNotEmpty)\nContainer(\nheight: 32.0,\nchild: Row(\nchildren: actions,\n),\n),\n],\n),\n),\nDivider(\ncolor: Colors.grey[400]!,\nheight: 1.0,\n),\n],\nContainer(\npadding: padding ?? const EdgeInsets.all(20.0),\ndecoration: BoxDecoration(\ncolor: Colors.grey[100],\n),\nchild: Column(\ncrossAxisAlignment: CrossAxisAlignment.start,\nchildren: children,\n),\n),\n],\n),\n);\n}\n}\n"
  },
  "reuseable_auto_complete": {
    "prefix": "reuseable_auto_complete",
    "body": "import 'package:realm_app/core.dart';\nimport 'package:flutter/material.dart';\n\nclass QAutoComplete extends StatefulWidget {\nfinal String label;\nfinal String? hint;\nfinal String? helper;\nfinal dynamic value;\nfinal List<Map<String, dynamic>> items;\nfinal String? Function(String? item)? validator;\nfinal Function(dynamic value, String? label) onChanged;\nfinal Function()? onFuture;\n\nconst QAutoComplete({\nKey? key,\nrequired this.label,\nthis.items = const [],\nthis.onFuture,\nthis.validator,\nthis.hint,\nthis.helper,\nthis.value,\nrequired this.onChanged,\n}) : super(key: key);\n\n@override\nState<QAutoComplete> createState() => _QAutoCompleteState();\n}\n\nclass _QAutoCompleteState extends State<QAutoComplete> {\nList<Map<String, dynamic>> items = [];\n\n@override\nvoid initState() {\nsuper.initState();\n\nif (widget.onFuture == null) {\nfor (var item in widget.items) {\nitems.add(Map.from(item));\n}\n} else {\nloadData();\n}\n}\n\nloadData() async {\nList<Map<String, dynamic>> serviceItems = await widget.onFuture!();\nfor (var item in serviceItems) {\nitems.add(item);\n}\nsetState(() {});\n}\n\n@override\nWidget build(BuildContext context) {\nif (items.isEmpty) return Container();\nreturn LayoutBuilder(builder: (context, constraints) {\nreturn Container(\nmargin: const EdgeInsets.only(\nbottom: 12.0,\n),\nchild: FormField(\ninitialValue: false,\nenabled: true,\nbuilder: (field) {\nreturn Autocomplete<Map>(\nfieldViewBuilder: (context, textEditingController, focusNode,\nonFieldSubmitted) {\nreturn Container(\nchild: TextFormField(\ncontroller: textEditingController,\nfocusNode: focusNode,\nonFieldSubmitted: (text) => onFieldSubmitted(),\nvalidator: widget.validator,\ndecoration: InputDecoration(\nlabelText: widget.label,\nerrorText: field.errorText,\nsuffixIcon: const Icon(Icons.search),\nhelperText: widget.helper,\nhintText: widget.hint,\n),\n),\n);\n},\nonSelected: (Map map) {\nString? label = map[\"label\"];\ndynamic value = map[\"value\"];\nwidget.onChanged(value, label);\n},\noptionsBuilder: (TextEditingValue textEditingValue) {\nif (textEditingValue.text == '') {\nreturn const Iterable<Map>.empty();\n}\nreturn items.where((Map option) {\nreturn option[\"label\"]\n.toString()\n.toLowerCase()\n.contains(textEditingValue.text.toLowerCase());\n});\n},\ndisplayStringForOption: (option) {\nreturn option[\"label\"];\n},\noptionsViewBuilder: (context, onSelected, options) => Align(\nalignment: Alignment.topLeft,\nchild: Material(\ncolor: Colors.transparent,\nchild: ClipRRect(\nclipBehavior: Clip.none,\nborderRadius: const BorderRadius.vertical(\nbottom: Radius.circular(12.0),\n),\nchild: Container(\nwidth: constraints.biggest.width,\nmargin: const EdgeInsets.only(top: 10.0),\nchild: Wrap(\nchildren: [\nContainer(\nclipBehavior: Clip.antiAlias,\ndecoration: BoxDecoration(\ncolor: Theme.of(Get.currentContext)\n.scaffoldBackgroundColor,\nborderRadius: const BorderRadius.all(\nRadius.circular(12.0),\n),\nborder: Border.all(\nwidth: 1.0,\ncolor: Colors.grey[300]!.withOpacity(0.4),\n),\n),\nchild: ListView.builder(\npadding: EdgeInsets.zero,\nitemCount: options.length,\nshrinkWrap: true,\nitemBuilder: (BuildContext context, int index) {\nbool selected =\nAutocompleteHighlightedOption.of(\ncontext) ==\nindex;\nMap option = options.elementAt(index);\n\nreturn InkWell(\nfocusColor: Colors.transparent,\nhoverColor: Colors.transparent,\nhighlightColor: Colors.transparent,\nonTap: () => onSelected(option),\nchild: Container(\ndecoration: BoxDecoration(\ncolor: selected\n? Theme.of(context).focusColor\n: null,\nborderRadius: BorderRadius.only(\ntopLeft: Radius.circular(\nindex == 0 ? 12 : 0,\n),\ntopRight: Radius.circular(\nindex == 0 ? 12 : 0,\n),\nbottomLeft: Radius.circular(\nindex == options.length - 1\n? 12\n: 0.0,\n),\nbottomRight: Radius.circular(\nindex == options.length - 1\n? 12\n: 0.0,\n),\n),\n),\nchild: ListTile(\nleading: option[\"photo\"] == null\n? null\n: CircleAvatar(\nbackgroundImage: NetworkImage(\noption[\"photo\"],\n),\n),\ntitle: Text(\"${option[\"label\"]}\"),\nsubtitle: option[\"info\"] == null\n? null\n: Text(\"${option[\"info\"]}\"),\n),\n),\n);\n},\n),\n),\n],\n),\n),\n),\n),\n),\n);\n}),\n);\n});\n}\n}\n"
  },
  "reuseable_action_button": {
    "prefix": "reuseable_action_button",
    "body": "import 'package:flutter/material.dart';\nimport 'package:realm_app/core.dart';\n\nclass QActionButton extends StatelessWidget {\nfinal String label;\nfinal Function onPressed;\nconst QActionButton({\nKey? key,\nrequired this.label,\nrequired this.onPressed,\n}) : super(key: key);\n\n@override\nWidget build(BuildContext context) {\nconst padding = 20.0;\nfinal height = 46.0;\n\nreturn Container(\npadding: const EdgeInsets.all(padding),\ncolor: Colors.white,\nwidth: MediaQuery.of(context).size.width,\nheight: height + (padding * 2),\nchild: ElevatedButton(\nstyle: ElevatedButton.styleFrom(\nbackgroundColor: primaryColor,\n),\nonPressed: () => onPressed(),\nchild: Text(\nlabel,\nstyle: const TextStyle(\nfontSize: 16.0,\n),\n),\n),\n);\n}\n}\n"
  },
  "reuseable_action_button_with_options": {
    "prefix": "reuseable_action_button_with_options",
    "body": "import 'package:flutter/material.dart';\nimport 'package:realm_app/core.dart';\n\nclass QActionButtonWithOptions extends StatelessWidget {\nfinal String label;\nfinal IconData icon;\nfinal Function onPressed;\nfinal Function onOptionPressed;\nconst QActionButtonWithOptions({\nKey? key,\nrequired this.label,\nrequired this.icon,\nrequired this.onPressed,\nrequired this.onOptionPressed,\n}) : super(key: key);\n\n@override\nWidget build(BuildContext context) {\nconst padding = 20.0;\nreturn Container(\npadding: const EdgeInsets.all(padding),\nheight: 48 + (padding * 2),\nchild: Row(\nchildren: [\nExpanded(\nchild: Container(\nheight: 48,\nchild: ElevatedButton(\nstyle: ElevatedButton.styleFrom(\nbackgroundColor: primaryColor,\n),\nonPressed: () => onPressed(),\nchild: Text(\nlabel,\nstyle: const TextStyle(\nfontSize: 16.0,\n),\n),\n),\n),\n),\nconst SizedBox(\nwidth: 16.0,\n),\nContainer(\nwidth: 68,\nheight: 48,\nchild: ElevatedButton(\nstyle: ElevatedButton.styleFrom(\nbackgroundColor: Color(0xffe8e8e8),\nforegroundColor: Color(0xff545d58),\n),\nonPressed: () => onOptionPressed(),\nchild: Icon(\nicon,\nsize: 24.0,\n),\n),\n),\n],\n),\n);\n}\n}\n"
  },
  "reuseable_button": {
    "prefix": "reuseable_button",
    "body": "import 'package:flutter/material.dart';\nimport 'package:realm_app/core.dart';\n\nclass QButton extends StatelessWidget {\nfinal String label;\nfinal Function onPressed;\nfinal double? width;\nfinal double? height;\nfinal IconData? icon;\nfinal IconData? sufixIcon;\nfinal Color? color;\nfinal bool spaceBetween;\nfinal ThemeSize size;\nfinal double? fontSize;\n\nQButton({\nKey? key,\nrequired this.label,\nrequired this.onPressed,\nthis.width,\nthis.height,\nthis.icon,\nthis.sufixIcon,\nthis.color,\nthis.spaceBetween = false,\nthis.size = ThemeSize.md,\nthis.fontSize,\n}) : super(key: key);\n\n@override\nWidget build(BuildContext context) {\ndouble widgetWidth = width ?? MediaQuery.of(context).size.width;\ndouble widgetHeight = 46.0;\ndouble widgetFontSize = 16.0;\ndouble widgetIconSize = 24.0;\n\nwidgetWidth *= size.scaleFactor;\nwidgetHeight *= size.scaleFactor;\nwidgetFontSize *= size.scaleFactor;\nwidgetIconSize *= size.scaleFactor;\n\nwidgetHeight = height ?? widgetHeight;\n\nreturn Container(\nwidth: widgetWidth,\nheight: widgetHeight,\nchild: ElevatedButton(\nstyle: ElevatedButton.styleFrom(\nbackgroundColor: color ?? primaryColor,\n),\nonPressed: () => onPressed(),\nchild: Row(\nmainAxisAlignment: MainAxisAlignment.center,\nchildren: [\nif (icon != null) ...[\nIcon(\nicon!,\nsize: widgetIconSize,\n),\nSizedBox(\nwidth: 6.0,\n),\n],\nif (spaceBetween && icon != null) Spacer(),\nText(\nlabel,\nstyle: TextStyle(\nfontSize: fontSize ?? widgetFontSize,\ncolor: Colors.white,\n),\n),\nif (spaceBetween && sufixIcon != null) Spacer(),\nif (sufixIcon != null) ...[\nIcon(\nsufixIcon!,\nsize: widgetIconSize,\n),\nSizedBox(\nwidth: 6.0,\n),\n],\n],\n),\n),\n);\n}\n}\n"
  },
  "reuseable_outline_button": {
    "prefix": "reuseable_outline_button",
    "body": "import 'package:flutter/material.dart';\nimport 'package:realm_app/shared/theme/theme_config.dart';\n\nclass QOutlineButton extends StatelessWidget {\nfinal String label;\nfinal Function onPressed;\nfinal double? width;\nQOutlineButton({\nKey? key,\nrequired this.label,\nrequired this.onPressed,\nthis.width,\n}) : super(key: key);\n\n@override\nWidget build(BuildContext context) {\nreturn Container(\nwidth: width ?? MediaQuery.of(context).size.width,\nheight: 48,\nchild: OutlinedButton(\nstyle: OutlinedButton.styleFrom(\nforegroundColor: Colors.green,\nside: BorderSide(\ncolor: primaryColor,\nwidth: 2.0,\n),\n),\nonPressed: () => onPressed(),\nchild: Text(\nlabel,\nstyle: TextStyle(\nfontSize: 16.0,\ncolor: primaryColor,\n),\n),\n),\n);\n}\n}\n"
  },
  "reuseable_outline_danger_button": {
    "prefix": "reuseable_outline_danger_button",
    "body": "import 'package:flutter/material.dart';\n\nclass QOutlineDangerButton extends StatelessWidget {\nfinal String label;\nfinal Function onPressed;\nfinal double? width;\nQOutlineDangerButton({\nKey? key,\nrequired this.label,\nrequired this.onPressed,\nthis.width,\n}) : super(key: key);\n\n@override\nWidget build(BuildContext context) {\nreturn Container(\nwidth: width ?? MediaQuery.of(context).size.width,\nheight: 48,\nchild: OutlinedButton(\nstyle: OutlinedButton.styleFrom(\nforegroundColor: Colors.red,\nside: BorderSide(\ncolor: Colors.red,\n),\n),\nonPressed: () => onPressed(),\nchild: Text(\nlabel,\nstyle: TextStyle(\nfontSize: 16.0,\ncolor: Colors.red,\n),\n),\n),\n);\n}\n}\n"
  },
  "reuseable_outline_icon_button": {
    "prefix": "reuseable_outline_icon_button",
    "body": "import 'package:flutter/material.dart';\n\nclass QOutlineIconButton extends StatelessWidget {\nfinal String label;\nfinal IconData icon;\nfinal Function onPressed;\nfinal double? width;\nQOutlineIconButton({\nKey? key,\nrequired this.label,\nrequired this.icon,\nrequired this.onPressed,\nthis.width,\n}) : super(key: key);\n\n@override\nWidget build(BuildContext context) {\nreturn Container(\nwidth: width ?? MediaQuery.of(context).size.width,\nheight: 48,\nchild: OutlinedButton.icon(\nicon: Icon(\nicon,\ncolor: Color(0xff434d48),\n),\nlabel: Text(\nlabel,\nstyle: TextStyle(\nfontSize: 16.0,\ncolor: Color(0xff434d48),\n),\n),\nstyle: OutlinedButton.styleFrom(\nforegroundColor: Colors.green,\nside: BorderSide(\ncolor: Color(0xffd9dbd9),\n),\n),\nonPressed: () => onPressed(),\n),\n);\n}\n}\n"
  },
  "reuseable_outline_success_button": {
    "prefix": "reuseable_outline_success_button",
    "body": "import 'package:flutter/material.dart';\nimport 'package:realm_app/core.dart';\n\nclass QOutlineSuccessButton extends StatelessWidget {\nfinal String label;\nfinal Function onPressed;\nfinal double? width;\nQOutlineSuccessButton({\nKey? key,\nrequired this.label,\nrequired this.onPressed,\nthis.width,\n}) : super(key: key);\n\n@override\nWidget build(BuildContext context) {\nreturn Container(\nwidth: width ?? MediaQuery.of(context).size.width,\nheight: 48,\nchild: OutlinedButton(\nstyle: OutlinedButton.styleFrom(\nforegroundColor: primaryColor,\nside: BorderSide(\ncolor: primaryColor,\n),\n),\nonPressed: () => onPressed(),\nchild: Text(\nlabel,\nstyle: TextStyle(\nfontSize: 16.0,\ncolor: primaryColor,\n),\n),\n),\n);\n}\n}\n"
  },
  "reuseable_category_picker": {
    "prefix": "reuseable_category_picker",
    "body": "import 'package:flutter/material.dart';\n\nclass QCategoryPicker extends StatefulWidget {\nfinal List<Map<String, dynamic>> items;\nfinal String? label;\nfinal dynamic value;\nfinal String? Function(int? value)? validator;\nfinal String? hint;\nfinal String? helper;\n\nfinal Function(\nMap<String, dynamic> item,\nbool selected,\nFunction action,\n)? itemBuilder;\n\nfinal Function(\nint index,\nString label,\ndynamic value,\nMap<String, dynamic> item,\n) onChanged;\nQCategoryPicker({\nKey? key,\nrequired this.items,\nrequired this.onChanged,\nthis.itemBuilder,\nthis.value,\nthis.validator,\nthis.label,\nthis.hint,\nthis.helper,\n}) : super(key: key);\n\n@override\nState<QCategoryPicker> createState() => _QCategoryPickerState();\n}\n\nclass _QCategoryPickerState extends State<QCategoryPicker> {\nList<Map<String, dynamic>> items = [];\nint selectedIndex = -1;\n\nupdateIndex(newIndex) {\nselectedIndex = newIndex;\nsetState(() {});\nvar item = items[selectedIndex];\nvar index = selectedIndex;\nvar label = item[\"label\"];\nvar value = item[\"value\"];\nwidget.onChanged(index, label, value, item);\n}\n\ngetLabel() {\nif (widget.label == null) return Container();\nreturn Column(\ncrossAxisAlignment: CrossAxisAlignment.start,\nchildren: [\nText(\n\"${widget.label}\",\nstyle: TextStyle(\nfontSize: 12.0,\ncolor: Theme.of(context).textTheme.bodySmall?.color,\n),\n),\nSizedBox(\nheight: 6.0,\n),\n],\n);\n}\n\n@override\nvoid initState() {\nitems = widget.items;\nif (widget.value != null) {\nselectedIndex = items.indexWhere((i) => i[\"value\"] == widget.value);\n}\nsuper.initState();\n}\n\n@override\nWidget build(BuildContext context) {\nreturn Container(\nmargin: EdgeInsets.only(\nbottom: 12.0,\n),\nchild: FormField(\ninitialValue: false,\nvalidator: (value) =>\nwidget.validator!(selectedIndex == -1 ? null : selectedIndex),\nenabled: true,\nbuilder: (FormFieldState<bool> field) {\nreturn InputDecorator(\ndecoration: InputDecoration(\nlabelText: widget.label,\nerrorText: field.errorText,\nborder: InputBorder.none,\nfocusedBorder: InputBorder.none,\nfilled: false,\nfillColor: Colors.transparent,\nenabledBorder: InputBorder.none,\nerrorBorder: InputBorder.none,\nhelperText: widget.helper,\nhintText: widget.hint,\n),\nchild: SizedBox(\nwidth: MediaQuery.of(context).size.width,\nchild: Column(\ncrossAxisAlignment: CrossAxisAlignment.start,\nchildren: [\nSizedBox(\nheight: 6.0,\n),\nSingleChildScrollView(\ncontroller: ScrollController(),\nscrollDirection: Axis.horizontal,\nclipBehavior: Clip.none,\nchild: Row(\ncrossAxisAlignment: CrossAxisAlignment.start,\nmainAxisAlignment: MainAxisAlignment.start,\nchildren: List.generate(items.length, (index) {\nbool selected = selectedIndex == index;\nvar item = items[index];\n\nif (widget.itemBuilder != null) {\nreturn widget.itemBuilder!(item, selected, () {\nupdateIndex(index);\n});\n}\n\nreturn Container(\nmargin: const EdgeInsets.only(\nright: 12.0,\n),\nchild: ElevatedButton(\nstyle: selected\n? null\n: ElevatedButton.styleFrom(\nbackgroundColor:\nTheme.of(context).disabledColor,\nelevation: 0.0,\n),\nonPressed: () => updateIndex(index),\nchild: Text(item[\"label\"]),\n),\n);\n}),\n),\n),\n],\n),\n),\n);\n},\n),\n);\n}\n}\n"
  },
  "reuseable_check_field": {
    "prefix": "reuseable_check_field",
    "body": "import 'package:flutter/material.dart';\n\nclass QCheckField extends StatefulWidget {\nfinal String label;\nfinal String? hint;\nfinal List<Map<String, dynamic>> items;\nfinal String? Function(List<Map<String, dynamic>> item)? validator;\nfinal List? value;\nfinal Future<List<Map<String, dynamic>>> Function()? onFuture;\nfinal Function(List<Map<String, dynamic>> values, List ids) onChanged;\nfinal String? helper;\nfinal bool singleValue;\n\nconst QCheckField({\nKey? key,\nrequired this.label,\nrequired this.items,\nthis.validator,\nthis.value,\nthis.onFuture,\nthis.hint,\nthis.helper,\nthis.singleValue = false,\nrequired this.onChanged,\n}) : super(key: key);\n\n@override\nState<QCheckField> createState() => _QCheckFieldState();\n}\n\nclass _QCheckFieldState extends State<QCheckField> {\nList<Map<String, dynamic>> items = [];\n\n@override\nvoid initState() {\nsuper.initState();\nfor (var item in widget.items) {\nitems.add(Map.from(item));\n}\n\n//Set Value\nif (widget.value != null) {\nfor (var item in widget.value!) {\nvar itemValue = item[\"value\"];\nvar index = items.indexWhere((i) => i[\"value\"] == itemValue);\nif (index == -1) continue;\nitems[index][\"checked\"] = item[\"checked\"];\n}\n}\nloadItems();\n}\n\nsetValue(List values) {\nfor (var itemRow in values) {\nvar searchValues =\nwidget.items.where((i) => i[\"value\"] == itemRow[\"value\"]).toList();\nif (searchValues.isEmpty) {\nitems.add(itemRow);\n}\n}\nsetState(() {});\n}\n\ngetValue() {}\n\nloadItems() async {\nif (widget.onFuture == null) return;\n\nList<Map<String, dynamic>> newItems = await widget.onFuture!();\nitems = newItems;\nsetState(() {});\n}\n\nuncheckAll() {\nif (widget.singleValue) {\nfor (var index = 0; index < items.length; index++) {\nitems[index][\"checked\"] = false;\n}\n}\n}\n\n@override\nWidget build(BuildContext context) {\nreturn Container(\nmargin: const EdgeInsets.only(\nbottom: 12.0,\n),\nchild: FormField(\ninitialValue: false,\nvalidator: (value) => widget.validator!(items),\nenabled: true,\nbuilder: (FormFieldState<bool> field) {\nreturn InputDecorator(\ndecoration: InputDecoration(\nlabelText: widget.label,\nerrorText: field.errorText,\nborder: InputBorder.none,\nhelperText: widget.helper,\nhintText: widget.hint,\n),\nchild: ListView.builder(\nshrinkWrap: true,\nitemCount: items.length,\nphysics: NeverScrollableScrollPhysics(),\nitemBuilder: (context, index) {\nvar item = items[index];\nreturn CheckboxListTile(\ncontentPadding: EdgeInsets.all(0.0),\ntitle: Text(\"${item[\"label\"]}\"),\nvalue: item[\"checked\"] ?? false,\nonChanged: (val) {\nuncheckAll();\nitems[index][\"checked\"] = val;\nfield.didChange(true);\nsetState(() {});\n\nList<Map<String, dynamic>> selectedValues =\nitems.where((i) => i[\"checked\"] == true).toList();\n\nList ids = selectedValues.map((e) => e[\"value\"]).toList();\nwidget.onChanged(selectedValues, ids);\n},\n);\n},\n),\n);\n},\n),\n);\n}\n}\n"
  },
  "reuseable_date_picker": {
    "prefix": "reuseable_date_picker",
    "body": "import 'package:realm_app/core.dart';\nimport 'package:flutter/material.dart';\n\nclass QDatePicker extends StatefulWidget {\nfinal String label;\nfinal DateTime? value;\nfinal String? hint;\nfinal String? helper;\nfinal String? Function(String?)? validator;\nfinal Function(DateTime) onChanged;\n\nconst QDatePicker({\nKey? key,\nrequired this.label,\nthis.value,\nthis.validator,\nthis.hint,\nthis.helper,\nrequired this.onChanged,\n}) : super(key: key);\n\n@override\nState<QDatePicker> createState() => _QDatePickerState();\n}\n\nclass _QDatePickerState extends State<QDatePicker> {\nDateTime? selectedValue;\nlate TextEditingController controller;\n@override\nvoid initState() {\nsuper.initState();\nselectedValue = widget.value;\ncontroller = TextEditingController(\ntext: getInitialValue(),\n);\n}\n\ngetInitialValue() {\nif (widget.value != null) {\nreturn DateFormat(\"d MMM y\").format(widget.value!);\n}\nreturn \"-\";\n}\n\ngetFormattedValue() {\nif (selectedValue != null) {\nreturn DateFormat(\"d MMM y\").format(selectedValue!);\n}\nreturn \"-\";\n}\n\n@override\nWidget build(BuildContext context) {\nreturn InkWell(\nfocusColor: Colors.transparent,\nhoverColor: Colors.transparent,\nhighlightColor: Colors.transparent,\nonTap: () async {\nDateTime? pickedDate = await showDatePicker(\ncontext: context,\ninitialDate: DateTime.now(),\nfirstDate: DateTime(2000),\nlastDate: DateTime(2100),\n);\nselectedValue = pickedDate;\ncontroller.text = getFormattedValue();\nsetState(() {});\n\nif (selectedValue == null) return;\nwidget.onChanged(selectedValue!);\n},\nchild: AbsorbPointer(\nchild: Container(\nmargin: const EdgeInsets.only(\nbottom: 12.0,\n),\nchild: TextFormField(\ncontroller: controller,\nvalidator: (value) {\nif (widget.validator != null) {\nreturn widget.validator!(selectedValue.toString());\n}\nreturn null;\n},\nreadOnly: true,\ndecoration: InputDecoration(\nlabelText: widget.label,\nlabelStyle: const TextStyle(\ncolor: Colors.blueGrey,\n),\nsuffixIcon: const Icon(\nIcons.date_range,\n),\nhelperText: widget.helper,\nhintText: widget.hint,\n),\n),\n),\n),\n);\n}\n}\n"
  },
  "reuseable_dropdown_field": {
    "prefix": "reuseable_dropdown_field",
    "body": "import 'package:flutter/material.dart';\n\nclass QDropdownField extends StatefulWidget {\nfinal String label;\nfinal String? hint;\nfinal String? helper;\nfinal List<Map<String, dynamic>> items;\nfinal String? Function(Map<String, dynamic>? value)? validator;\nfinal dynamic value;\nfinal bool emptyMode;\nfinal Function(dynamic value, String? label) onChanged;\n\nconst QDropdownField({\nKey? key,\nrequired this.label,\nrequired this.items,\nrequired this.onChanged,\nthis.value,\nthis.validator,\nthis.emptyMode = true,\nthis.hint,\nthis.helper,\n}) : super(key: key);\n\n@override\nState<QDropdownField> createState() => _QDropdownFieldState();\n}\n\nclass _QDropdownFieldState extends State<QDropdownField> {\nList<Map<String, dynamic>> items = [];\nMap<String, dynamic>? selectedValue;\n\n@override\nvoid initState() {\nsuper.initState();\n\nitems = [];\nif (widget.emptyMode) {\nitems.add({\n\"label\": \"-\",\n\"value\": \"-\",\n});\nselectedValue = {\n\"label\": \"-\",\n\"value\": \"-\",\n};\n}\n\nfor (var item in widget.items) {\nitems.add(item);\n}\n\nvar values = widget.items.where((i) => i[\"value\"] == widget.value).toList();\nif (values.isNotEmpty) {\nselectedValue = values.first;\n}\n}\n\nMap<String, dynamic>? get currentValue {\nif (widget.emptyMode) {\nvar foundItems =\nitems.where((i) => i[\"value\"] == selectedValue?[\"value\"]).toList();\nif (foundItems.isNotEmpty) {\nreturn foundItems.first;\n}\n\nreturn {\n\"label\": \"-\",\n\"value\": \"-\",\n};\n}\nreturn items.first;\n}\n\n@override\nWidget build(BuildContext context) {\nreturn Container(\nmargin: const EdgeInsets.only(\nbottom: 12.0,\n),\nchild: FormField(\ninitialValue: false,\nvalidator: (value) {\nif (widget.validator != null) {\nif (widget.emptyMode && selectedValue?[\"value\"] == \"-\") {\nreturn widget.validator!(null);\n}\nreturn widget.validator!(selectedValue);\n}\nreturn null;\n},\nenabled: true,\nbuilder: (FormFieldState<bool> field) {\nreturn InputDecorator(\ndecoration: InputDecoration(\nlabelText: widget.label,\nerrorText: field.errorText,\nhelperText: widget.hint,\n),\nchild: DropdownButtonHideUnderline(\nchild: ButtonTheme(\nalignedDropdown: false,\nchild: SizedBox(\nheight: 20.0,\nchild: DropdownButton<Map<String, dynamic>>(\nisExpanded: true,\nvalue: currentValue,\nicon: Icon(\nIcons.arrow_drop_down_outlined,\nsize: 24.0,\ncolor: Theme.of(context).textTheme.bodyLarge!.color,\n),\niconSize: 16,\nelevation: 16,\nstyle: TextStyle(\nfontSize:\nTheme.of(context).textTheme.bodyMedium!.fontSize,\nfontFamily:\nTheme.of(context).textTheme.bodyMedium!.fontFamily,\ncolor: Theme.of(context).textTheme.bodyMedium!.color,\n),\nunderline: Container(\nheight: 0,\ncolor: Colors.grey[300],\n),\nonChanged: (Map<String, dynamic>? newValue) {\nif (widget.emptyMode && newValue?[\"value\"] == \"-\") {\nselectedValue = {\n\"label\": \"-\",\n\"value\": \"-\",\n};\n} else {\nselectedValue = newValue!;\n}\nsetState(() {});\n\nvar label = selectedValue![\"label\"];\nvar value = selectedValue![\"value\"];\nwidget.onChanged(value, label);\n},\nitems: List.generate(\nitems.length,\n(index) {\nvar item = items[index];\nreturn DropdownMenuItem<Map<String, dynamic>>(\nvalue: item,\nchild: Padding(\npadding: const EdgeInsets.symmetric(\nhorizontal: 0.0,\nvertical: 0.0,\n),\nchild: Text(\nitem[\"label\"],\n),\n),\n);\n},\n),\n),\n),\n),\n),\n);\n},\n),\n);\n}\n}\n"
  },
  "reuseable_image_picker": {
    "prefix": "reuseable_image_picker",
    "body": "import 'dart:io';\nimport 'package:dio/dio.dart';\nimport 'package:file_picker/file_picker.dart';\nimport 'package:flutter/foundation.dart';\nimport 'package:flutter/material.dart';\nimport 'package:image_picker/image_picker.dart';\n\nclass QImagePicker extends StatefulWidget {\nfinal String label;\nfinal String? value;\nfinal String? hint;\nfinal String? helper;\nfinal String? Function(String?)? validator;\nfinal bool obscure;\nfinal Function(String) onChanged;\nfinal String? provider;\n\nQImagePicker({\nKey? key,\nrequired this.label,\nthis.value,\nthis.validator,\nthis.hint,\nthis.helper,\nrequired this.onChanged,\nthis.obscure = false,\nthis.provider = \"cloudinary\",\n}) : super(key: key);\n\n@override\nState<QImagePicker> createState() => _QImagePickerState();\n}\n\nclass _QImagePickerState extends State<QImagePicker> {\nString? imageUrl;\nbool loading = false;\nlate TextEditingController controller;\n@override\nvoid initState() {\nimageUrl = widget.value;\ncontroller = TextEditingController(\ntext: widget.value ?? \"-\",\n);\nsuper.initState();\n}\n\nFuture<String?> getFileMultiplePlatform() async {\nFilePickerResult? result = await FilePicker.platform.pickFiles(\ntype: FileType.custom,\nallowedExtensions: [\n\"png\",\n\"jpg\",\n],\nallowMultiple: false,\n);\nif (result == null) return null;\nreturn result.files.first.path;\n}\n\nFuture<String?> getFileAndroidIosAndWeb() async {\nXFile? image = await ImagePicker().pickImage(\nsource: ImageSource.gallery,\nimageQuality: 40,\n);\nString? filePath = image?.path;\nif (filePath == null) return null;\nreturn filePath;\n}\n\nFuture<String?> uploadFile(String filePath) async {\nif (widget.provider == \"cloudinary\") {\nreturn await uploadToCloudinary(filePath);\n}\nreturn await uploadToImgBB(filePath);\n}\n\nFuture<String> uploadToImgBB(String filePath) async {\nfinal formData = FormData.fromMap({\n'image': MultipartFile.fromBytes(\nFile(filePath).readAsBytesSync(),\nfilename: \"upload.jpg\",\n),\n});\n\nvar res = await Dio().post(\n'https://api.imgbb.com/1/upload?key=b55ef3fd02b80ab180f284e479acd7c4',\ndata: formData,\n);\n\nvar data = res.data[\"data\"];\nvar url = data[\"url\"];\nwidget.onChanged(url);\nreturn url;\n}\n\nFuture<String> uploadToCloudinary(String filePath) async {\nString cloudName = \"dotz74j1p\";\nString apiKey = \"983354314759691\";\n\nfinal formData = FormData.fromMap({\n'file': MultipartFile.fromBytes(\nFile(filePath).readAsBytesSync(),\nfilename: \"upload.jpg\",\n),\n'upload_preset': 'yogjjkoh',\n'api_key': apiKey,\n});\n\nvar res = await Dio().post(\n'https://api.cloudinary.com/v1_1/$cloudName/image/upload',\ndata: formData,\n);\n\nString url = res.data[\"secure_url\"];\nreturn url;\n}\n\nbrowsePhoto() async {\nif (loading) return;\n\nString? filePath;\nloading = true;\nsetState(() {});\n\nif (!kIsWeb && Platform.isWindows) {\nfilePath = await getFileMultiplePlatform();\n} else {\nfilePath = await getFileAndroidIosAndWeb();\n}\nif (filePath == null) return;\n\nimageUrl = await uploadFile(filePath);\nloading = false;\n\nif (imageUrl != null) {\nwidget.onChanged(imageUrl!);\ncontroller.text = imageUrl!;\n}\nsetState(() {});\n}\n\nString? get currentValue {\nreturn imageUrl;\n}\n\n@override\nWidget build(BuildContext context) {\nreturn Container(\npadding: EdgeInsets.symmetric(vertical: 4.0),\nmargin: EdgeInsets.only(\nbottom: 12.0,\n),\nchild: Row(\ncrossAxisAlignment: CrossAxisAlignment.center,\nmainAxisAlignment: MainAxisAlignment.start,\nchildren: [\nContainer(\nheight: 96.0,\nwidth: 96.0,\nmargin: EdgeInsets.only(\ntop: 8.0,\n),\ndecoration: BoxDecoration(\ncolor: loading ? Colors.blueGrey[900] : null,\nimage: loading\n? null\n: DecorationImage(\nimage: NetworkImage(\nimageUrl == null\n? \"https://i.ibb.co/S32HNjD/no-image.jpg\"\n: imageUrl!,\n),\nfit: BoxFit.cover,\n),\nborderRadius: BorderRadius.all(\nRadius.circular(\n16.0,\n),\n),\n),\nchild: Visibility(\nvisible: loading == true,\nchild: SizedBox(\nwidth: 30,\nheight: 30,\nchild: Column(\ncrossAxisAlignment: CrossAxisAlignment.center,\nmainAxisAlignment: MainAxisAlignment.center,\nchildren: [\nSizedBox(\nwidth: 20.0,\nheight: 20.0,\nchild: CircularProgressIndicator(\ncolor: Colors.orange,\n),\n),\nSizedBox(\nheight: 6.0,\n),\nText(\n\"Uploading...\",\nstyle: TextStyle(\nfontSize: 9.0,\n),\n),\n],\n),\n),\n),\n),\nSizedBox(\nwidth: 20.0,\n),\nExpanded(\nchild: FormField(\ninitialValue: false,\nvalidator: (value) {\nreturn widget.validator!(imageUrl);\n},\nenabled: true,\nbuilder: (FormFieldState<bool> field) {\nreturn TextFormField(\ncontroller: controller,\nobscureText: widget.obscure,\nreadOnly: true,\ndecoration: InputDecoration(\nlabelText: widget.label,\nlabelStyle: TextStyle(\ncolor: Colors.blueGrey,\n),\nsuffixIcon: Transform.scale(\nscale: 0.8,\nchild: SizedBox(\nwidth: 80.0,\nchild: ElevatedButton(\nstyle: Theme.of(context).elevatedButtonTheme.style,\nonPressed: () => browsePhoto(),\nchild: Text(\n\"Browse\",\nstyle: TextStyle(\nfontSize: 12.0,\n),\n),\n),\n),\n),\nhelperText: widget.helper,\nhintText: widget.hint,\nerrorText: field.errorText,\n),\nonChanged: (value) {\nwidget.onChanged(value);\n},\n);\n}),\n),\n],\n),\n);\n}\n}\n"
  },
  "reuseable_list_view": {
    "prefix": "reuseable_list_view",
    "body": "import 'package:dio/dio.dart';\nimport 'package:flutter/gestures.dart';\nimport 'package:flutter/material.dart';\nimport 'package:uuid/uuid.dart';\n\nimport '../../dismissible/dismissible.dart';\n\nclass QListView extends StatefulWidget {\nstatic Map<String, QListViewState> instance = {};\nfinal String? id;\nfinal Function(int page) futureBuilder;\nfinal Function(Map<String, dynamic> item)? onDismiss;\nfinal double? height;\nfinal double? padding;\nfinal Gradient? gradient;\nfinal Color? color;\nfinal Axis? scrollDirection;\nfinal bool wrapMode;\nfinal bool shrinkWrap;\nfinal double? bottomMargin;\n\nstatic reloadAll() async {\nfor (var key in instance.keys) {\ninstance[key]?.reload();\n}\n}\n\nfinal Function(int, Map<String, dynamic>) builder;\nconst QListView({\nthis.id,\nrequired this.builder,\nrequired this.futureBuilder,\nthis.height,\nthis.padding,\nthis.gradient,\nthis.color,\nthis.scrollDirection,\nthis.wrapMode = false,\nthis.shrinkWrap = false,\nthis.bottomMargin,\nthis.onDismiss,\nKey? key,\n}) : super(key: key);\n\n@override\nState<QListView> createState() => QListViewState();\n}\n\nclass QListViewState extends State<QListView> {\nbool loading = true;\nbool bottomLoading = false;\nResponse? response;\nDioException? dioError;\nList<Map?> items = [];\nint page = 1;\nScrollController scrollController = ScrollController();\n\nbool singleModeLoading = false;\n\nFuture onLoading({\nbool nextPage = false,\n}) async {\nif (!mounted) return;\nif (!nextPage) {\npage = 1;\nitems.clear();\nloading = true;\nif (mounted) setState(() {});\n} else {\npage++;\n}\n\ndioError = null;\ntry {\nresponse = await widget.futureBuilder(page);\n} on DioException catch (_) {\ndioError = _;\ndebugPrint(\"DioError: $_\");\n} on Exception catch (_) {\ndebugPrint(\"Exception: $_\");\n}\n\nif (dioError != null || response == null) {\nloading = false;\nif (mounted) setState(() {});\nreturn;\n}\n\nMap responseMap = response?.data;\nList data = responseMap[\"data\"];\n\nif (data.isEmpty) {\npage--;\n}\n\nfor (var i = 0; i < data.length; i++) {\nvar item = data[i];\nitems.add(item);\n}\n\nloading = false;\nif (mounted) setState(() {});\n}\n\ninitScrollController() {\nscrollController = ScrollController();\nscrollController.addListener(() {\nif (scrollController.hasClients) {\nif (scrollController.offset ==\nscrollController.position.maxScrollExtent) {\nonLoading(nextPage: true);\n}\n}\n});\n}\n\nlate String id;\n\n@override\nvoid initState() {\nsuper.initState();\nid = widget.id ?? const Uuid().v4();\nQListView.instance[id] = this;\ninitScrollController();\nonLoading();\n}\n\n@override\nvoid dispose() {\nsuper.dispose();\nQListView.instance.remove(id);\n}\n\nreload() async {\nif (mounted) {\nawait onLoading();\n}\n}\n\n@override\nWidget build(BuildContext context) {\nif (loading) {\nreturn const Center(\nchild: CircularProgressIndicator(),\n);\n}\nif (widget.wrapMode) {\nreturn Wrap(\nchildren: List.generate(\nitems.length,\n(index) {\nvar item = (items[index] as Map<String, dynamic>);\n\nreturn widget.builder(index, item);\n},\n),\n);\n}\n\nif (dioError != null) {\nreturn SizedBox(\nheight: widget.height,\nwidth: MediaQuery.of(context).size.width,\nchild: Column(\ncrossAxisAlignment: CrossAxisAlignment.center,\nmainAxisAlignment: MainAxisAlignment.center,\nchildren: [\nText(\n\"Dio Error : ${dioError?.message}\",\nstyle: const TextStyle(\nfontSize: 12.0,\nfontWeight: FontWeight.bold,\n),\n),\nconst SizedBox(\nheight: 10.0,\n),\nElevatedButton.icon(\nicon: const Icon(Icons.refresh),\nlabel: const Text(\"Retry\"),\nstyle: ElevatedButton.styleFrom(\nbackgroundColor: Colors.blueGrey,\n),\nonPressed: () {\nonLoading();\n},\n),\n],\n),\n);\n}\n\nif (response == null) {\nreturn SizedBox(\nheight: widget.height,\nwidth: MediaQuery.of(context).size.width,\nchild: Column(\ncrossAxisAlignment: CrossAxisAlignment.center,\nmainAxisAlignment: MainAxisAlignment.center,\nchildren: [\nText(\n\"Null response : ${response?.statusCode}\",\nstyle: const TextStyle(\nfontSize: 12.0,\nfontWeight: FontWeight.bold,\n),\n),\nconst SizedBox(\nheight: 10.0,\n),\nElevatedButton.icon(\nicon: const Icon(Icons.refresh),\nlabel: const Text(\"Refresh\"),\nstyle: ElevatedButton.styleFrom(\nbackgroundColor: Colors.blueGrey,\n),\nonPressed: () {\nonLoading();\n},\n),\n],\n),\n);\n}\n\nreturn Container(\nheight: widget.height,\nwidth: MediaQuery.of(context).size.width,\npadding: EdgeInsets.all(widget.padding ?? 0.0),\ndecoration: BoxDecoration(\ncolor: widget.color,\ngradient: widget.gradient,\n),\nchild: RefreshIndicator(\nonRefresh: () async {\nawait reload();\n},\nchild: ScrollConfiguration(\nbehavior: ScrollConfiguration.of(context).copyWith(\ndragDevices: {\nPointerDeviceKind.touch,\nPointerDeviceKind.mouse,\n},\n),\nchild: ListView.builder(\ncontroller: scrollController,\nitemCount: items.length,\nshrinkWrap: widget.shrinkWrap,\nscrollDirection: widget.scrollDirection ?? Axis.vertical,\nitemBuilder: (context, index) {\nMap<String, dynamic> item =\n(items[index] as Map<String, dynamic>);\n\nif (widget.onDismiss != null) {\nreturn QDismissible(\nonDismiss: () async {\nawait widget.onDismiss!(item);\n},\nchild: Container(\nmargin: EdgeInsets.only(\nbottom: widget.bottomMargin ?? 0.0,\n),\nchild: widget.builder(index, item),\n),\n);\n}\nreturn Container(\nmargin: EdgeInsets.only(\nbottom: widget.bottomMargin ?? 0.0,\n),\nchild: widget.builder(index, item),\n);\n},\n),\n),\n),\n);\n}\n}\n"
  },
  "reuseable_location_picker": {
    "prefix": "reuseable_location_picker",
    "body": "import 'dart:io';\nimport 'package:flutter/foundation.dart';\nimport 'package:flutter/material.dart';\nimport 'package:geolocator/geolocator.dart';\nimport 'package:realm_app/core.dart';\nimport 'package:permission_handler/permission_handler.dart';\n\nclass QLocationPicker extends StatefulWidget {\nfinal String id;\nfinal String? label;\nfinal String? hint;\nfinal String? helper;\nfinal double? latitude;\nfinal double? longitude;\nfinal String? Function(double? latitude, double? longitude)? validator;\nfinal Function(double latitude, double longitude) onChanged;\nfinal bool enableEdit;\n\nQLocationPicker({\nKey? key,\nrequired this.id,\nthis.label,\nthis.hint,\nthis.helper,\nthis.latitude,\nthis.longitude,\nthis.validator,\nrequired this.onChanged,\nthis.enableEdit = true,\n}) : super(key: key);\n\n@override\n_QLocationPickerState createState() => _QLocationPickerState();\n}\n\nclass _QLocationPickerState extends State<QLocationPicker> {\ndouble? latitude;\ndouble? longitude;\nbool loading = true;\n\n@override\nvoid initState() {\nsuper.initState();\nif (widget.latitude == null || widget.longitude == null) {\ngetLocation();\n} else {\nlatitude = widget.latitude;\nlongitude = widget.longitude;\nloading = false;\n}\n}\n\ngetLocation() async {\nbool serviceEnabled = await Geolocator.isLocationServiceEnabled();\n\nif (!serviceEnabled) {\nreturn Future.error('Location services are disabled.');\n}\n\nLocationPermission permission = await Geolocator.checkPermission();\nif (permission == LocationPermission.denied) {\npermission = await Geolocator.requestPermission();\nif (permission == LocationPermission.denied) {\nreturn Future.error('Location permissions are denied');\n}\n}\n\nif (permission == LocationPermission.deniedForever) {\nreturn Future.error(\n'Location permissions are permanently denied, we cannot request permissions.');\n}\n\nPosition position = await Geolocator.getCurrentPosition();\nlatitude = position.latitude;\nlongitude = position.longitude;\nloading = false;\nsetState(() {});\n\nwidget.onChanged(latitude!, longitude!);\n}\n\nbool isLocationPicked() {\nif (latitude != null && longitude != null) {\nreturn true;\n}\nreturn false;\n}\n\n@override\nWidget build(BuildContext context) {\nreturn Container(\nmargin: EdgeInsets.only(\nbottom: 12.0,\n),\nchild: FormField(\ninitialValue: false,\nvalidator: (value) {\nif (widget.validator != null) {\nreturn widget.validator!(latitude, longitude);\n}\nreturn null;\n},\nenabled: true,\nbuilder: (FormFieldState<bool> field) {\nreturn InputDecorator(\ndecoration: InputDecoration(\nlabelText: widget.label,\nerrorText: field.errorText,\nborder: InputBorder.none,\nhelperText: widget.helper,\nhintText: widget.hint,\n),\nchild: Container(\nwidth: MediaQuery.of(context).size.width,\nchild: Column(\ncrossAxisAlignment: CrossAxisAlignment.start,\nchildren: [\nconst SizedBox(\nheight: 12.0,\n),\nSizedBox(\nwidth: MediaQuery.of(context).size.width,\nheight: 200.0,\nchild: ClipRRect(\nborderRadius: BorderRadius.all(\nRadius.circular(12.0),\n),\nchild: loading\n? Container(\nchild: Center(\nchild: Text(\"No location selected\"),\n),\n)\n: AbsorbPointer(\nabsorbing: true,\nchild: MapViewer(\nlatitude: latitude,\nlongitude: longitude,\n),\n),\n),\n),\nColumn(\ncrossAxisAlignment: CrossAxisAlignment.start,\nchildren: [\nif (!isLocationPicked())\nQButton(\nlabel: \"Select\",\nicon: Icons.location_on,\nsize: sm,\nonPressed: () async {\nif (!kIsWeb &&\n(Platform.isAndroid || Platform.isIOS)) {\nif (!await Permission.location\n.request()\n.isGranted) {\nreturn;\n}\nreturn;\n}\n\nNavigator.push(\ncontext,\nMaterialPageRoute(\nbuilder: (context) => ExLocationPickerMapView(\nid: widget.id,\nlatitude: latitude,\nlongitude: longitude,\nenableEdit: widget.enableEdit,\nonChanged: widget.onChanged,\n),\n),\n);\n\nsetState(() {});\n},\n),\nSizedBox(\nheight: 12.0,\n),\nif (isLocationPicked())\nQButton(\nlabel: \"Change\",\nicon: Icons.location_on,\nsize: sm,\nonPressed: () async {\nawait Navigator.push(\ncontext,\nMaterialPageRoute(\nbuilder: (context) => ExLocationPickerMapView(\nid: widget.id,\nlatitude: latitude,\nlongitude: longitude,\nenableEdit: widget.enableEdit,\nonChanged: widget.onChanged,\n),\n),\n);\n\nloading = true;\nsetState(() {});\n\nawait Future.delayed(Duration(milliseconds: 200));\n\nloading = false;\nsetState(() {});\n},\n),\n],\n),\n],\n),\n),\n);\n},\n),\n);\n}\n}\n"
  },
  "reuseable_memo_field": {
    "prefix": "reuseable_memo_field",
    "body": "import 'package:flutter/material.dart';\n\nclass QMemoField extends StatefulWidget {\nfinal String label;\nfinal String? value;\nfinal String? hint;\nfinal String? helper;\nfinal String? Function(String?)? validator;\nfinal int? maxLength;\nfinal int? maxLines;\nfinal Function(String) onChanged;\n\nconst QMemoField({\nKey? key,\nrequired this.label,\nthis.value,\nthis.validator,\nthis.hint,\nthis.helper,\nrequired this.onChanged,\nthis.maxLength,\nthis.maxLines,\n}) : super(key: key);\n\nState<QMemoField> createState() => _QMemoFieldState();\n}\n\nclass _QMemoFieldState extends State<QMemoField> {\nFocusNode focusNode = FocusNode();\nGlobalKey key = GlobalKey();\n\nvoid initState() {\nfocusNode.addListener(() {\nprint(\"focusNodeListener\");\nif (focusNode.hasFocus) {\nFuture.delayed(const Duration(milliseconds: 300), () {\nWidgetsBinding.instance\n.addPostFrameCallback((_) => Scrollable.ensureVisible(\nkey.currentContext!,\nalignmentPolicy:\nScrollPositionAlignmentPolicy.keepVisibleAtEnd,\n));\n});\n}\n});\nsuper.initState();\n}\n\n@override\nWidget build(BuildContext context) {\nif (focusNode.hasFocus) {\nFuture.delayed(const Duration(milliseconds: 300), () {\nWidgetsBinding.instance\n.addPostFrameCallback((_) => Scrollable.ensureVisible(\nkey.currentContext!,\nalignmentPolicy:\nScrollPositionAlignmentPolicy.keepVisibleAtEnd,\n));\n});\n}\nreturn Container(\nmargin: const EdgeInsets.only(\nbottom: 12.0,\n),\nchild: TextFormField(\nkey: key,\ninitialValue: widget.value,\nfocusNode: focusNode,\nvalidator: widget.validator,\nmaxLength: widget.maxLength,\nmaxLines: widget.maxLines ?? 6,\ndecoration: InputDecoration(\nlabelText: widget.label,\nsuffixIcon: const Icon(\nIcons.text_format,\n),\nhelperText: widget.helper,\nhintText: widget.hint,\n),\nonChanged: widget.onChanged,\n),\n);\n}\n}\n"
  },
  "reuseable_number_field": {
    "prefix": "reuseable_number_field",
    "body": "import 'package:flutter/material.dart';\nimport 'package:realm_app/shared/theme/theme_config.dart';\nimport 'package:intl/intl.dart';\n\nclass QNumberField extends StatefulWidget {\nfinal String label;\nfinal String? value;\nfinal String? hint;\nfinal String? helper;\nfinal String? Function(String?)? validator;\nfinal Function(String) onChanged;\nfinal Function(String)? onSubmitted;\n\nfinal String? pattern;\nfinal String? locale;\n\nconst QNumberField({\nKey? key,\nrequired this.label,\nthis.value,\nthis.validator,\nthis.hint,\nthis.helper,\nrequired this.onChanged,\nthis.onSubmitted,\nthis.pattern,\nthis.locale = \"en_US\",\n}) : super(key: key);\n\n@override\nState<QNumberField> createState() => _QNumberFieldState();\n}\n\nclass _QNumberFieldState extends State<QNumberField> {\nString? value;\nlate TextEditingController controller;\n\n@override\nvoid initState() {\nsuper.initState();\nvalue = widget.value?.replaceAll(RegExp(r'[^0-9.]'), '');\nprint(\"value: $value\");\nprint(\"value: ${widget.value}\");\ncontroller = TextEditingController();\ncontroller.text = formattedValue?.toString() ?? \"\";\n}\n\nString? get formattedValue {\nif (widget.pattern != null) {\nfinal currencyFormat = NumberFormat(widget.pattern, widget.locale);\nvar pValue = num.tryParse(value.toString()) ?? 0;\nreturn currencyFormat.format(pValue);\n}\nreturn value;\n}\n\n@override\nWidget build(BuildContext context) {\nreturn Container(\nmargin: const EdgeInsets.only(\nbottom: 12.0,\n),\nconstraints: BoxConstraints(\nminHeight: inputHeight,\n),\nchild: TextFormField(\ncontroller: controller,\nvalidator: widget.validator,\nkeyboardType: TextInputType.number,\ndecoration: InputDecoration(\nlabelText: widget.label,\nsuffixIcon: const Icon(\nIcons.numbers,\n),\nhelperText: widget.helper,\nhintText: widget.hint,\n),\nonChanged: (newValue) {\nvar newValue = controller.text;\nprint(\"newValue: $newValue\");\n\nvalue = newValue.replaceAll(RegExp(r'[^0-9.]'), '');\n\nprint(\"value: $value\");\ncontroller.text = formattedValue ?? \"\";\ncontroller.selection =\nTextSelection.collapsed(offset: controller.text.length);\n\nwidget.onChanged(newValue.replaceAll(RegExp(r'\\D'), ''));\n},\nonFieldSubmitted: (newValue) {\nvar newValue = controller.text;\nprint(\"newValue: $newValue\");\n\nvalue = newValue.replaceAll(RegExp(r'[^0-9.]'), '');\n\nprint(\"value: $value\");\ncontroller.text = formattedValue ?? \"\";\ncontroller.selection =\nTextSelection.collapsed(offset: controller.text.length);\n\nif (widget.onSubmitted != null) {\nwidget.onSubmitted!(newValue.replaceAll(RegExp(r'\\D'), ''));\n}\n},\n),\n);\n}\n}\n"
  },
  "reuseable_radio_field": {
    "prefix": "reuseable_radio_field",
    "body": "import 'package:flutter/material.dart';\n\nclass QRadioField extends StatefulWidget {\nfinal String label;\nfinal String? hint;\nfinal String? helper;\nfinal List<Map<String, dynamic>> items;\nfinal String? Function(List<Map<String, dynamic>> item)? validator;\nfinal Function(dynamic value, String? label) onChanged;\nfinal String? value;\n\nconst QRadioField({\nKey? key,\nrequired this.label,\nrequired this.items,\nthis.validator,\nthis.hint,\nthis.helper,\nthis.value,\nrequired this.onChanged,\n}) : super(key: key);\n\n@override\nState<QRadioField> createState() => _QRadioFieldState();\n}\n\nclass _QRadioFieldState extends State<QRadioField> {\nList<Map<String, dynamic>> items = [];\n\n@override\nvoid initState() {\nsuper.initState();\nfor (var item in widget.items) {\nitems.add(Map.from(item));\nif (items.last[\"value\"] == widget.value) {\nitems.last[\"checked\"] = true;\n}\n}\n}\n\nsetAllItemsToFalse() {\nfor (var item in items) {\nitem[\"checked\"] = false;\n}\n}\n\n@override\nWidget build(BuildContext context) {\nreturn Container(\nmargin: const EdgeInsets.only(\nbottom: 12.0,\n),\nchild: FormField(\ninitialValue: false,\nvalidator: (value) => widget.validator!(items),\nenabled: true,\nbuilder: (FormFieldState<bool> field) {\nreturn InputDecorator(\ndecoration: InputDecoration(\nlabelText: widget.label,\nerrorText: field.errorText,\nborder: InputBorder.none,\nhelperText: widget.helper,\nhintText: widget.hint,\n),\nchild: ListView.builder(\nshrinkWrap: true,\nitemCount: items.length,\nitemBuilder: (context, index) {\nvar item = items[index];\nreturn RadioListTile(\ncontentPadding: EdgeInsets.all(0.0),\ntitle: Text(\"${item[\"label\"]}\"),\ngroupValue: true,\nvalue: item[\"checked\"] ?? false,\nonChanged: (val) {\nsetAllItemsToFalse();\nbool newValue = val ? false : true;\nitems[index][\"checked\"] = newValue;\nfield.didChange(true);\nsetState(() {});\n\nString? label = items[index][\"label\"];\nint foundIndex =\nitems.indexWhere((item) => item[\"label\"] == label);\ndynamic value = items[foundIndex][\"value\"];\nwidget.onChanged(value, label);\n},\n);\n},\n),\n);\n},\n),\n);\n}\n}\n"
  },
  "reuseable_rating_field": {
    "prefix": "reuseable_rating_field",
    "body": "import 'package:flutter/material.dart';\nimport 'package:flutter_rating_bar/flutter_rating_bar.dart';\n\nclass QRatingField extends StatefulWidget {\nfinal String label;\nfinal double? value;\nfinal bool enabled;\nfinal String? Function(double?)? validator;\nfinal Function(double value)? onChanged;\nfinal String? hint;\nfinal String? helper;\n\nQRatingField({\nKey? key,\nrequired this.label,\nthis.value,\nthis.onChanged,\nthis.validator,\nthis.enabled = false,\nthis.hint,\nthis.helper,\n}) : super(key: key);\n\n@override\nState<QRatingField> createState() => _QRatingFieldState();\n}\n\nclass _QRatingFieldState extends State<QRatingField> {\ndouble? currentValue;\nGlobalKey widgetKey = GlobalKey();\n\n@override\nvoid initState() {\ncurrentValue = widget.value;\nWidgetsBinding.instance.addPostFrameCallback((_) {\ngetHeight();\n});\n\nsuper.initState();\n}\n\ngetHeight() {\nfinal RenderBox? renderBox =\nwidgetKey.currentContext?.findRenderObject() as RenderBox?;\nif (renderBox != null) {\nfinal size = renderBox.size;\nsetState(() {\nwidgetHeight = size.height;\n});\n}\n}\n\ndouble widgetHeight = 0;\n@override\nWidget build(BuildContext context) {\nreturn FormField(\ninitialValue: false,\nenabled: widget.enabled,\nvalidator: (value) {\nif (widget.validator != null) {\nreturn widget.validator!(currentValue);\n}\nreturn null;\n},\nbuilder: (field) {\nreturn Container(\nmargin: EdgeInsets.only(\nbottom: 12.0,\n),\nchild: Container(\nkey: widgetKey,\nchild: LayoutBuilder(builder: (context, constraints) {\nreturn Stack(\nchildren: [\nTextFormField(\ninitialValue: \" \",\ndecoration: InputDecoration(\nlabelText: widget.label,\nhelperText: widget.helper,\nhintText: widget.hint,\nerrorText: field.errorText,\n),\n),\nAlign(\nalignment: Alignment.centerLeft,\nchild: Container(\nmargin: EdgeInsets.only(\ntop: 13,\nleft: 20.0,\n),\nwidth: MediaQuery.of(context).size.width,\nchild: Column(\ncrossAxisAlignment: CrossAxisAlignment.start,\nmainAxisAlignment: MainAxisAlignment.center,\nchildren: [\nRatingBar.builder(\ninitialRating: widget.value ?? 0,\nminRating: 1,\ndirection: Axis.horizontal,\nallowHalfRating: true,\nitemCount: 5,\nitemBuilder: (context, _) => Icon(\nIcons.star,\ncolor: Colors.amber,\n),\nitemSize: 20.0,\nonRatingUpdate: (rating) {\ncurrentValue = rating;\nif (widget.onChanged != null) {\nwidget.onChanged!(rating);\n}\n},\n),\n],\n),\n),\n),\n],\n);\n}),\n),\n);\n});\n}\n}\n"
  },
  "reuseable_switch": {
    "prefix": "reuseable_switch",
    "body": "import 'package:flutter/material.dart';\n\nclass QSwitch extends StatefulWidget {\nfinal String label;\nfinal String? hint;\nfinal String? helper;\nfinal List<Map<String, dynamic>> items;\nfinal String? Function(List<Map<String, dynamic>> item)? validator;\nfinal List? value;\nfinal Function(List<Map<String, dynamic>> values, List ids) onChanged;\n\nconst QSwitch({\nKey? key,\nrequired this.label,\nrequired this.items,\nthis.validator,\nthis.value,\nthis.hint,\nthis.helper,\nrequired this.onChanged,\n}) : super(key: key);\n\n@override\nState<QSwitch> createState() => _QSwitchState();\n}\n\nclass _QSwitchState extends State<QSwitch> {\nList<Map<String, dynamic>> items = [];\n\n@override\nvoid initState() {\nsuper.initState();\nfor (var item in widget.items) {\nitems.add(Map.from(item));\n}\n}\n\n@override\nWidget build(BuildContext context) {\nreturn Container(\nmargin: const EdgeInsets.only(\nbottom: 12.0,\n),\nchild: FormField(\ninitialValue: false,\nvalidator: (value) => widget.validator!(items),\nenabled: true,\nbuilder: (FormFieldState<bool> field) {\nreturn InputDecorator(\ndecoration: InputDecoration(\nlabelText: widget.label,\nerrorText: field.errorText,\nborder: InputBorder.none,\nhelperText: widget.helper,\nhintText: widget.hint,\n),\nchild: ListView.builder(\nshrinkWrap: true,\nitemCount: items.length,\nitemBuilder: (context, index) {\nvar item = items[index];\n\nreturn SwitchListTile(\ncontentPadding: EdgeInsets.all(0.0),\ntitle: Text(\"${item[\"label\"]}\"),\nvalue: item[\"checked\"] ?? false,\nonChanged: (val) {\nitems[index][\"checked\"] = val;\nfield.didChange(true);\nsetState(() {});\n\nList<Map<String, dynamic>> selectedValues =\nitems.where((i) => i[\"checked\"] == true).toList();\n\nList ids = selectedValues.map((e) => e[\"value\"]).toList();\nwidget.onChanged(selectedValues, ids);\n},\n);\n},\n),\n);\n},\n),\n);\n}\n}\n"
  },
  "reuseable_text_field": {
    "prefix": "reuseable_text_field",
    "body": "import 'package:flutter/material.dart';\n\nclass QTextField extends StatefulWidget {\nfinal String? id;\nfinal String label;\nfinal String? value;\nfinal String? hint;\nfinal String? helper;\nfinal String? Function(String?)? validator;\nfinal bool obscure;\nfinal bool enabled;\nfinal int? maxLength;\nfinal IconData? prefixIcon;\nfinal IconData? suffixIcon;\nfinal Function(String) onChanged;\nfinal Function(String)? onSubmitted;\n\nconst QTextField({\nKey? key,\nrequired this.label,\nthis.id,\nthis.value,\nthis.validator,\nthis.hint,\nthis.helper,\nthis.maxLength,\nrequired this.onChanged,\nthis.onSubmitted,\nthis.obscure = false,\nthis.enabled = true,\nthis.prefixIcon,\nthis.suffixIcon,\n}) : super(key: key);\n\n@override\nState<QTextField> createState() => _QTextFieldState();\n}\n\nclass _QTextFieldState extends State<QTextField> {\nTextEditingController textEditingController = TextEditingController();\n\n@override\nvoid initState() {\ntextEditingController.text = widget.value ?? \"\";\nsuper.initState();\n}\n\ngetValue() {\nreturn textEditingController.text;\n}\n\nsetValue(value) {\ntextEditingController.text = value;\n}\n\nresetValue() {\ntextEditingController.text = \"\";\n}\n\nfocus() {\nfocusNode.requestFocus();\n}\n\nFocusNode focusNode = FocusNode();\n\n@override\nWidget build(BuildContext context) {\nreturn Container(\nmargin: const EdgeInsets.only(\nbottom: 12.0,\n),\nchild: TextFormField(\nenabled: widget.enabled,\ncontroller: textEditingController,\nfocusNode: focusNode,\nvalidator: widget.validator,\nmaxLength: widget.maxLength,\nobscureText: widget.obscure,\ndecoration: InputDecoration(\nlabelText: widget.label,\nsuffixIcon: Icon(\nwidget.suffixIcon ?? Icons.abc,\n),\nhelperText: widget.helper,\nhintText: widget.hint,\n),\nonChanged: (value) {\nwidget.onChanged(value);\n},\nonFieldSubmitted: (value) {\nif (widget.onSubmitted != null) widget.onSubmitted!(value);\n},\n),\n);\n}\n}\n"
  },
  "reuseable_time_picker": {
    "prefix": "reuseable_time_picker",
    "body": "import 'package:flutter/material.dart';\n\nclass QTimePicker extends StatefulWidget {\nfinal String label;\nfinal TimeOfDay? value;\nfinal String? hint;\nfinal String? helper;\nfinal String? Function(String?)? validator;\nfinal Function(TimeOfDay?) onChanged;\n\nconst QTimePicker({\nKey? key,\nrequired this.label,\nthis.value,\nthis.validator,\nthis.hint,\nthis.helper,\nrequired this.onChanged,\n}) : super(key: key);\n\n@override\nState<QTimePicker> createState() => _QTimePickerState();\n}\n\nclass _QTimePickerState extends State<QTimePicker> {\nTimeOfDay? selectedValue;\nlate TextEditingController controller;\n@override\nvoid initState() {\nsuper.initState();\nselectedValue = widget.value;\ncontroller = TextEditingController(\ntext: getInitialValue(),\n);\n}\n\ngetInitialValue() {\nif (widget.value != null) {\nvar hh = widget.value?.hour.toString().padLeft(2, \"0\");\nvar mm = widget.value?.minute.toString().padLeft(2, \"0\");\nreturn \"$hh:$mm\";\n}\nreturn \"-\";\n}\n\ngetFormattedValue() {\nif (selectedValue != null) {\nvar hh = selectedValue?.hour.toString().padLeft(2, \"0\");\nvar mm = selectedValue?.minute.toString().padLeft(2, \"0\");\nreturn \"$hh:$mm\";\n}\nreturn \"-\";\n}\n\n@override\nWidget build(BuildContext context) {\nreturn InkWell(\nfocusColor: Colors.transparent,\nhoverColor: Colors.transparent,\nhighlightColor: Colors.transparent,\nonTap: () async {\nTimeOfDay? pickedTime = await showTimePicker(\ninitialTime: TimeOfDay.now(),\ncontext: context,\nbuilder: (context, child) {\nreturn MediaQuery(\ndata:\nMediaQuery.of(context).copyWith(alwaysUse24HourFormat: true),\nchild: child ?? Container(),\n);\n},\n);\nprint(\"pickedTime: $pickedTime\");\nselectedValue = pickedTime;\ncontroller.text = getFormattedValue();\nsetState(() {});\n\nwidget.onChanged(selectedValue);\n},\nchild: AbsorbPointer(\nchild: Container(\nmargin: const EdgeInsets.only(\nbottom: 12.0,\n),\nchild: TextFormField(\ncontroller: controller,\nvalidator: (value) {\nif (widget.validator != null) {\nreturn widget.validator!(selectedValue.toString());\n}\nreturn null;\n},\nreadOnly: true,\ndecoration: InputDecoration(\nlabelText: widget.label,\nlabelStyle: const TextStyle(\ncolor: Colors.blueGrey,\n),\nsuffixIcon: const Icon(\nIcons.timer,\n),\nhelperText: widget.helper,\nhintText: widget.hint,\n),\n),\n),\n),\n);\n}\n}\n"
  },
  "realm_counter": {
    "prefix": "realm_counter",
    "body": "RealmCounter<Task>(\nstream: TaskService.instance.snapshot(),\nitemBuilder: (items) {\nreturn Text(\n\"${items.length}\",\nstyle: TextStyle(\nfontSize: 12.0,\n),\n);\n},\n),"
  },
  "realm_list": {
    "prefix": "realm_list",
    "body": "RealmListView<UserProfile>(\nstream: UserProfileService.instance.snapshot(),\nitemBuilder: (item, index) {\nreturn QDismissible(\nonDismiss: () => controller.delete(item),\nchild: ListTile(\ntitle: Text(\"${item.name}\"),\nsubtitle: Text(\"${item.email}\"),\nonTap: () async {\nawait Get.to(UserProfileFormView(\nitem: item,\n));\n},\n),\n);\n},\n),"
  }
}